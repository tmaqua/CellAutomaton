User.create!([
  {email: "admin@fankami.com", encrypted_password: "$2a$11$MJ7TKoytraS7JTd7bka3rei3AP4c2BueLSWFO00wIcEm.q8xpKzfm", reset_password_token: nil, reset_password_sent_at: nil, remember_created_at: nil, sign_in_count: 9, current_sign_in_at: "2017-02-10 04:25:34", last_sign_in_at: "2017-02-07 03:57:51", current_sign_in_ip: "::1", last_sign_in_ip: "::1"}
])
Cell.create!([
  {color: "#0874ef", cell_automaton_id: 10},
  {color: "#fdfefe", cell_automaton_id: 10},
  {color: "#000000", cell_automaton_id: 10},
  {color: "#fdfefe", cell_automaton_id: 14},
  {color: "#000000", cell_automaton_id: 14},
  {color: "#fdfefd", cell_automaton_id: 15},
  {color: "#d2ca10", cell_automaton_id: 15},
  {color: "#ffffff", cell_automaton_id: 16},
  {color: "#e8ea93", cell_automaton_id: 16},
  {color: "#ff0000", cell_automaton_id: 16},
  {color: "#ff8000", cell_automaton_id: 16},
  {color: "#0000ff", cell_automaton_id: 16},
  {color: "#000000", cell_automaton_id: 17},
  {color: "#00ff00", cell_automaton_id: 17},
  {color: "#ffffff", cell_automaton_id: 17},
  {color: "#0000ff", cell_automaton_id: 17},
  {color: "#000000", cell_automaton_id: 19},
  {color: "#f41431", cell_automaton_id: 19},
  {color: "#ffffff", cell_automaton_id: 19},
  {color: "#eca2e4", cell_automaton_id: 19},
  {color: "#fdfefe", cell_automaton_id: 21},
  {color: "#9f14f4", cell_automaton_id: 21},
  {color: "#fdfefe", cell_automaton_id: 22},
  {color: "#9f14f4", cell_automaton_id: 22},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000000", cell_automaton_id: 23},
  {color: "#000010", cell_automaton_id: 23},
  {color: "#000011", cell_automaton_id: 23},
  {color: "#000012", cell_automaton_id: 23},
  {color: "#000013", cell_automaton_id: 23},
  {color: "#000014", cell_automaton_id: 23},
  {color: "#000015", cell_automaton_id: 23},
  {color: "#000016", cell_automaton_id: 23},
  {color: "#000017", cell_automaton_id: 23},
  {color: "#000018", cell_automaton_id: 23},
  {color: "#000019", cell_automaton_id: 23},
  {color: "#00001a", cell_automaton_id: 23},
  {color: "#00001b", cell_automaton_id: 23},
  {color: "#00001c", cell_automaton_id: 23},
  {color: "#00001d", cell_automaton_id: 23},
  {color: "#00001e", cell_automaton_id: 23},
  {color: "#00001f", cell_automaton_id: 23},
  {color: "#000020", cell_automaton_id: 23},
  {color: "#000021", cell_automaton_id: 23},
  {color: "#000022", cell_automaton_id: 23},
  {color: "#000023", cell_automaton_id: 23},
  {color: "#000024", cell_automaton_id: 23},
  {color: "#000025", cell_automaton_id: 23},
  {color: "#000026", cell_automaton_id: 23},
  {color: "#000027", cell_automaton_id: 23},
  {color: "#000028", cell_automaton_id: 23},
  {color: "#000029", cell_automaton_id: 23},
  {color: "#00002a", cell_automaton_id: 23},
  {color: "#00002b", cell_automaton_id: 23},
  {color: "#00002c", cell_automaton_id: 23},
  {color: "#00002d", cell_automaton_id: 23},
  {color: "#00002e", cell_automaton_id: 23},
  {color: "#00002f", cell_automaton_id: 23},
  {color: "#000030", cell_automaton_id: 23},
  {color: "#000031", cell_automaton_id: 23},
  {color: "#000032", cell_automaton_id: 23},
  {color: "#000033", cell_automaton_id: 23},
  {color: "#000034", cell_automaton_id: 23},
  {color: "#000035", cell_automaton_id: 23},
  {color: "#000036", cell_automaton_id: 23},
  {color: "#000037", cell_automaton_id: 23},
  {color: "#000038", cell_automaton_id: 23},
  {color: "#000039", cell_automaton_id: 23},
  {color: "#00003a", cell_automaton_id: 23},
  {color: "#00003b", cell_automaton_id: 23},
  {color: "#00003c", cell_automaton_id: 23},
  {color: "#00003d", cell_automaton_id: 23},
  {color: "#00003e", cell_automaton_id: 23},
  {color: "#00003f", cell_automaton_id: 23},
  {color: "#000040", cell_automaton_id: 23},
  {color: "#000041", cell_automaton_id: 23},
  {color: "#000042", cell_automaton_id: 23},
  {color: "#000043", cell_automaton_id: 23},
  {color: "#000044", cell_automaton_id: 23},
  {color: "#000045", cell_automaton_id: 23},
  {color: "#000046", cell_automaton_id: 23},
  {color: "#000047", cell_automaton_id: 23},
  {color: "#000048", cell_automaton_id: 23},
  {color: "#000049", cell_automaton_id: 23},
  {color: "#00004a", cell_automaton_id: 23},
  {color: "#00004b", cell_automaton_id: 23},
  {color: "#00004c", cell_automaton_id: 23},
  {color: "#00004d", cell_automaton_id: 23},
  {color: "#00004e", cell_automaton_id: 23},
  {color: "#00004f", cell_automaton_id: 23},
  {color: "#000050", cell_automaton_id: 23},
  {color: "#000051", cell_automaton_id: 23},
  {color: "#000052", cell_automaton_id: 23},
  {color: "#000053", cell_automaton_id: 23},
  {color: "#000054", cell_automaton_id: 23},
  {color: "#000055", cell_automaton_id: 23},
  {color: "#000056", cell_automaton_id: 23},
  {color: "#000057", cell_automaton_id: 23},
  {color: "#000058", cell_automaton_id: 23},
  {color: "#000059", cell_automaton_id: 23},
  {color: "#00005a", cell_automaton_id: 23},
  {color: "#00005b", cell_automaton_id: 23},
  {color: "#00005c", cell_automaton_id: 23},
  {color: "#00005d", cell_automaton_id: 23},
  {color: "#00005e", cell_automaton_id: 23},
  {color: "#00005f", cell_automaton_id: 23},
  {color: "#000060", cell_automaton_id: 23},
  {color: "#000061", cell_automaton_id: 23},
  {color: "#000062", cell_automaton_id: 23},
  {color: "#000063", cell_automaton_id: 23},
  {color: "#000064", cell_automaton_id: 23},
  {color: "#000065", cell_automaton_id: 23},
  {color: "#000066", cell_automaton_id: 23},
  {color: "#000067", cell_automaton_id: 23},
  {color: "#000068", cell_automaton_id: 23},
  {color: "#000069", cell_automaton_id: 23},
  {color: "#00006a", cell_automaton_id: 23},
  {color: "#00006b", cell_automaton_id: 23},
  {color: "#00006c", cell_automaton_id: 23},
  {color: "#00006d", cell_automaton_id: 23},
  {color: "#00006e", cell_automaton_id: 23},
  {color: "#00006f", cell_automaton_id: 23},
  {color: "#000070", cell_automaton_id: 23},
  {color: "#000071", cell_automaton_id: 23},
  {color: "#000072", cell_automaton_id: 23},
  {color: "#000073", cell_automaton_id: 23},
  {color: "#000074", cell_automaton_id: 23},
  {color: "#000075", cell_automaton_id: 23},
  {color: "#000076", cell_automaton_id: 23},
  {color: "#000077", cell_automaton_id: 23},
  {color: "#000078", cell_automaton_id: 23},
  {color: "#000079", cell_automaton_id: 23},
  {color: "#00007a", cell_automaton_id: 23},
  {color: "#00007b", cell_automaton_id: 23},
  {color: "#00007c", cell_automaton_id: 23},
  {color: "#00007d", cell_automaton_id: 23},
  {color: "#00007e", cell_automaton_id: 23},
  {color: "#00007f", cell_automaton_id: 23},
  {color: "#000080", cell_automaton_id: 23},
  {color: "#000081", cell_automaton_id: 23},
  {color: "#000082", cell_automaton_id: 23},
  {color: "#000083", cell_automaton_id: 23},
  {color: "#000084", cell_automaton_id: 23},
  {color: "#000085", cell_automaton_id: 23},
  {color: "#000086", cell_automaton_id: 23},
  {color: "#000087", cell_automaton_id: 23},
  {color: "#000088", cell_automaton_id: 23},
  {color: "#000089", cell_automaton_id: 23},
  {color: "#00008a", cell_automaton_id: 23},
  {color: "#00008b", cell_automaton_id: 23},
  {color: "#00008c", cell_automaton_id: 23},
  {color: "#00008d", cell_automaton_id: 23},
  {color: "#00008e", cell_automaton_id: 23},
  {color: "#00008f", cell_automaton_id: 23},
  {color: "#000090", cell_automaton_id: 23},
  {color: "#000091", cell_automaton_id: 23},
  {color: "#000092", cell_automaton_id: 23},
  {color: "#000093", cell_automaton_id: 23},
  {color: "#000094", cell_automaton_id: 23},
  {color: "#000095", cell_automaton_id: 23},
  {color: "#000096", cell_automaton_id: 23},
  {color: "#000097", cell_automaton_id: 23},
  {color: "#000098", cell_automaton_id: 23},
  {color: "#000099", cell_automaton_id: 23},
  {color: "#00009a", cell_automaton_id: 23},
  {color: "#00009b", cell_automaton_id: 23},
  {color: "#00009c", cell_automaton_id: 23},
  {color: "#00009d", cell_automaton_id: 23},
  {color: "#00009e", cell_automaton_id: 23},
  {color: "#00009f", cell_automaton_id: 23},
  {color: "#0000a0", cell_automaton_id: 23},
  {color: "#0000a1", cell_automaton_id: 23},
  {color: "#0000a2", cell_automaton_id: 23},
  {color: "#0000a3", cell_automaton_id: 23},
  {color: "#0000a4", cell_automaton_id: 23},
  {color: "#0000a5", cell_automaton_id: 23},
  {color: "#0000a6", cell_automaton_id: 23},
  {color: "#0000a7", cell_automaton_id: 23},
  {color: "#0000a8", cell_automaton_id: 23},
  {color: "#0000a9", cell_automaton_id: 23},
  {color: "#0000aa", cell_automaton_id: 23},
  {color: "#0000ab", cell_automaton_id: 23},
  {color: "#0000ac", cell_automaton_id: 23},
  {color: "#0000ad", cell_automaton_id: 23},
  {color: "#0000ae", cell_automaton_id: 23},
  {color: "#0000af", cell_automaton_id: 23},
  {color: "#0000b0", cell_automaton_id: 23},
  {color: "#0000b1", cell_automaton_id: 23},
  {color: "#0000b2", cell_automaton_id: 23},
  {color: "#0000b3", cell_automaton_id: 23},
  {color: "#0000b4", cell_automaton_id: 23},
  {color: "#0000b5", cell_automaton_id: 23},
  {color: "#0000b6", cell_automaton_id: 23},
  {color: "#0000b7", cell_automaton_id: 23},
  {color: "#0000b8", cell_automaton_id: 23},
  {color: "#0000b9", cell_automaton_id: 23},
  {color: "#0000ba", cell_automaton_id: 23},
  {color: "#0000bb", cell_automaton_id: 23},
  {color: "#0000bc", cell_automaton_id: 23},
  {color: "#0000bd", cell_automaton_id: 23},
  {color: "#0000be", cell_automaton_id: 23},
  {color: "#0000bf", cell_automaton_id: 23},
  {color: "#0000c0", cell_automaton_id: 23},
  {color: "#0000c1", cell_automaton_id: 23},
  {color: "#0000c2", cell_automaton_id: 23},
  {color: "#0000c3", cell_automaton_id: 23},
  {color: "#0000c4", cell_automaton_id: 23},
  {color: "#0000c5", cell_automaton_id: 23},
  {color: "#0000c6", cell_automaton_id: 23},
  {color: "#0000c7", cell_automaton_id: 23},
  {color: "#0000c8", cell_automaton_id: 23},
  {color: "#0000c9", cell_automaton_id: 23},
  {color: "#0000ca", cell_automaton_id: 23},
  {color: "#0000cb", cell_automaton_id: 23},
  {color: "#0000cc", cell_automaton_id: 23},
  {color: "#0000cd", cell_automaton_id: 23},
  {color: "#0000ce", cell_automaton_id: 23},
  {color: "#0000cf", cell_automaton_id: 23},
  {color: "#0000d0", cell_automaton_id: 23},
  {color: "#0000d1", cell_automaton_id: 23},
  {color: "#0000d2", cell_automaton_id: 23},
  {color: "#0000d3", cell_automaton_id: 23},
  {color: "#0000d4", cell_automaton_id: 23},
  {color: "#0000d5", cell_automaton_id: 23},
  {color: "#0000d6", cell_automaton_id: 23},
  {color: "#0000d7", cell_automaton_id: 23},
  {color: "#0000d8", cell_automaton_id: 23},
  {color: "#0000d9", cell_automaton_id: 23},
  {color: "#0000da", cell_automaton_id: 23},
  {color: "#0000db", cell_automaton_id: 23},
  {color: "#0000dc", cell_automaton_id: 23},
  {color: "#0000dd", cell_automaton_id: 23},
  {color: "#0000de", cell_automaton_id: 23},
  {color: "#0000df", cell_automaton_id: 23},
  {color: "#0000e0", cell_automaton_id: 23},
  {color: "#0000e1", cell_automaton_id: 23},
  {color: "#0000e2", cell_automaton_id: 23},
  {color: "#0000e3", cell_automaton_id: 23},
  {color: "#0000e4", cell_automaton_id: 23},
  {color: "#0000e5", cell_automaton_id: 23},
  {color: "#0000e6", cell_automaton_id: 23},
  {color: "#0000e7", cell_automaton_id: 23},
  {color: "#0000e8", cell_automaton_id: 23},
  {color: "#0000e9", cell_automaton_id: 23},
  {color: "#0000ea", cell_automaton_id: 23},
  {color: "#0000eb", cell_automaton_id: 23},
  {color: "#0000ec", cell_automaton_id: 23},
  {color: "#0000ed", cell_automaton_id: 23},
  {color: "#0000ee", cell_automaton_id: 23},
  {color: "#0000ef", cell_automaton_id: 23},
  {color: "#0000f0", cell_automaton_id: 23},
  {color: "#0000f1", cell_automaton_id: 23},
  {color: "#0000f2", cell_automaton_id: 23},
  {color: "#0000f3", cell_automaton_id: 23},
  {color: "#0000f4", cell_automaton_id: 23},
  {color: "#0000f5", cell_automaton_id: 23},
  {color: "#0000f6", cell_automaton_id: 23},
  {color: "#0000f7", cell_automaton_id: 23},
  {color: "#0000f8", cell_automaton_id: 23},
  {color: "#0000f9", cell_automaton_id: 23},
  {color: "#0000fa", cell_automaton_id: 23},
  {color: "#0000fb", cell_automaton_id: 23},
  {color: "#0000fc", cell_automaton_id: 23},
  {color: "#0000fd", cell_automaton_id: 23},
  {color: "#0000fe", cell_automaton_id: 23},
  {color: "#0000ff", cell_automaton_id: 23}
])
CellAutomaton.create!([
  {name: "Simple traffic", board_size: 50, step: 150, state_num: 3, init_type: nil, neighbor_rule: "# 0: 車両\r\n# 1: 道路\r\n# 2: 進入不可\r\n# judge_next_state(state_count, now_state, now_array, x, y)\r\n  herf = (height - 2)/2\r\n  if y == herf || y == herf+1\r\n    if x == 0 # car in\r\n      flag = Random.rand <= 0.8 ? true : false\r\n      if flag && now_state == 1\r\n        0\r\n      else\r\n        1\r\n      end\r\n    elsif x == width # car out\r\n      if (now_array[y][x-1] == 0)\r\n        0\r\n      else\r\n        1\r\n      end\r\n    else # car run\r\n      if (now_state == 0)\r\n        if (now_array[y][x+1] == 0)\r\n          0\r\n        else\r\n          1\r\n        end\r\n      else\r\n        if (now_array[y][x-1] == 0)\r\n          0\r\n        else\r\n          1\r\n        end\r\n      end\r\n    end\r\n  else\r\n    2\r\n  end\r\n# end", user_id: 1, init_rule: "herf = (height - 2)/2\r\nheight.times do |i|\r\n   if i >= 0 && i < herf\r\n      init_array[i] = (Array.new(width){ 2 })\r\n   elsif i >= height - herf && i < height\r\n      init_array[i] = (Array.new(width){ 2 })\r\n   else\r\n      init_array[i] = (Array.new(width){ rand(0..1) })\r\n   end\r\nend", width: 50, height: 50, pattern: false},
  {name: "ルール30", board_size: nil, step: 10, state_num: 2, init_type: nil, neighbor_rule: "rule30 = [ 0, 1, 1, 1, 1, 0, 0, 0 ]\r\nj = x\r\ni = y\r\nif i == 0\r\n   now_array[y][x]\r\nelse\r\n   length = width\r\n   before = i -1\r\n   left = (j + width -1) % width\r\n   center = j\r\n   right = (j + 1) % length\r\n   code = now_array[before][left] *4 + now_array[before][center]*2 + now_array[before][right]*1\r\n   rule30[code]\r\nend", user_id: 1, init_rule: "init_array[0][width/2] = 1", width: 10, height: 10, pattern: false},
  {name: "fieldmap", board_size: nil, step: 100, state_num: 2, init_type: nil, neighbor_rule: "if x == width-1 || y == height-1 || x == 0 || y == 0\r\n   return 0\r\nend\r\n\r\ncount_state_temp = count_state(now_array, y, x, 1, width, height)\r\ncount = count_state_temp[:count]\r\nneighbor_array = count_state_temp[:array]\r\n\r\ncase count\r\nwhen 0\r\n   0\r\nwhen 1\r\n   if Random.rand(0 .. 100) >= 10\r\n      0\r\n   else\r\n      1\r\n   end\r\nwhen 2\r\n   if Random.rand(0 .. 100) >= 20\r\n      0\r\n   else\r\n      1\r\n   end\r\nwhen 3\r\n   if Random.rand(0 .. 100) >= 20\r\n      0\r\n   else\r\n      1\r\n   end\r\nwhen 4\r\n   if Random.rand(0 .. 100) >= 50\r\n      0\r\n   else\r\n      1\r\n   end\r\nwhen 5\r\n   if Random.rand(0 .. 100) >= 80\r\n      0\r\n   else\r\n      1\r\n   end\r\nwhen 6\r\n   if Random.rand(0 .. 100) >= 80\r\n      0\r\n   else\r\n      1\r\n   end\r\nwhen 7\r\n   if Random.rand(0 .. 100) >= 90\r\n      0\r\n   else\r\n      1\r\n   end\r\nwhen 8\r\n   1\r\nend", user_id: 1, init_rule: "temp = Array.new(width){ Array.new(height){Random.rand(0 .. 1)} }\r\ntemp.each_with_index do |temp_y, y|\r\n   temp_y.each_with_index do |temp_x, x|\r\n      if x == width-1 || y == height-1 || x == 0 || y == 0\r\n         init_array[y][x] = 0\r\n      else\r\n         init_array[y][x] = temp[y][x]\r\n      end\r\n   end\r\nend\r\n", width: 50, height: 50, pattern: false},
  {name: "fire", board_size: nil, step: 100, state_num: 5, init_type: nil, neighbor_rule: "# 0: 床\r\n# 1: 人\r\n# 2: 炎\r\n# 3: 物\r\n# 4: 出口\r\n\r\ncase now_state\r\nwhen 0\r\n  fire = count_state(now_array, y, x, 2, width, height)\r\n  fire_count = fire[:count]\r\n  if fire_count >= 3\r\n    2\r\n  elsif neighbor_array[2][0] == 1\r\n    1\r\n  else\r\n    0\r\n  end\r\nwhen 1\r\n  fire = count_state(now_array, y, x, 2, width, height)\r\n  fire_count = fire[:count]\r\n  if check_state_for_array(neighbor_array, 4)\r\n    0\r\n  elsif fire_count >= 3\r\n    2\r\n  elsif neighbor_array[0][2] == 0\r\n    0\r\n  elsif neighbor_array[0][1] == 0\r\n    0\r\n  elsif neighbor_array[1][2] == 0\r\n    0\r\n  else\r\n    1\r\n  end\r\nwhen 2\r\n  2\r\nwhen 4\r\n  4\r\nend", user_id: 1, init_rule: "# 0: 床\r\n# 1: 人\r\n# 2: 炎\r\n# 3: 物\r\n# 4: 出口\r\n\r\nheight.times do |y|\r\n   width.times do |x|\r\n      random = Random.rand(0 .. 100)\r\n      if random < 10\r\n         init_array[y][x] = 1\r\n      else\r\n         init_array[y][x] = 0\r\n      end\r\n   end\r\nend\r\n\r\nfire = 10\r\nfire_height = (height-fire)\r\nfire_width = (width-fire)\r\nfire.times do |y|\r\n  fire.times do |x|\r\n    init_array[fire_height+y][x] = 2\r\n  end\r\nend\r\ninit_array[0][width-1] = 4 # 右上は出口", width: 50, height: 50, pattern: false},
  {name: "避難", board_size: nil, step: 100, state_num: 4, init_type: nil, neighbor_rule: "# 0: 壁\r\n# 1: 人\r\n# 2: 通路\r\n# 3: 出口\r\n\r\ncase now_state\r\n  when 0\r\n    return 0\r\n  when 1\r\n    return 1\r\n  when 2\r\n    return 2\r\n  when 3\r\n    return 3\r\nend", user_id: 1, init_rule: "# 0: 壁\r\n# 1: 人\r\n# 2: 通路\r\n# 3: 出口\r\n\r\nheight.times do |y|\r\n   width.times do |x|\r\n     if x==0 || y==0 || x==width-1 || y==height-1\r\n       init_array[y][x] = 0\r\n     else\r\n      random = Random.rand(0 .. 100)\r\n      if random < 10\r\n         init_array[y][x] = 1\r\n      elsif random >= 10 && random < 90\r\n           init_array[y][x] = 0\r\n      else\r\n         init_array[y][x] = 2\r\n      end\r\n   end\r\nend\r\nend\r\n\r\ninit_array[1][width-2] = 3 # 右上は出口", width: 50, height: 50, pattern: false},
  {name: "避難- 拡張", board_size: nil, step: 100, state_num: 4, init_type: nil, neighbor_rule: "human_next_steps = []\r\ngoals = [{x:48, y: 1}, {x:0, y: 19}, {x:0, y: 18}, {x:0, y:17}, {x: 22, y: 49}, {x: 23, y: 49}, {x: 24, y: 49}]\r\nold_array.each_with_index do |old_array_row, y|\r\n  old_array_row.each_with_index do |now_state, x|\r\n\r\n    # 0: 壁\r\n    # 1: 人\r\n    # 2: 通路\r\n    # 3: 出口\r\n\r\n    case now_state\r\n      when 0\r\n        new_array[y][x] = 0\r\n      when 1\r\n        neighbors = [\r\n          {x: x-1, y: y-1, state: old_array[y-1][x-1], value: 100},\r\n          {x: x  , y: y-1, state: old_array[y-1][x], value: 100},\r\n          {x: x+1, y: y-1, state: old_array[y-1][x+1], value: 100},\r\n\r\n          {x: x-1, y: y  , state: old_array[y][x-1], value: 100},\r\n          {x: x, y: y  , state: old_array[y][x], value: 100},\r\n          {x: x+1, y: y  , state: old_array[y][x+1], value: 100},\r\n\r\n          {x: x-1, y: y+1, state: old_array[y+1][x-1], value: 100},\r\n          {x: x  , y: y+1, state: old_array[y+1][x], value: 100},\r\n          {x: x+1, y: y+1, state: old_array[y+1][x+1], value: 100}\r\n        ]\r\n\r\n        goal_distances = []\r\n        goals.each_with_index do |goal, i|\r\n           goal_distances.push({index: i, d:(((goal[:x] - x)**2 + (goal[:y] - y)**2)**(1/2.0))})\r\n        end\r\n        min_goal_distance = goal_distances.sort_by { |v| v[:d] }[0][:index]\r\n        goal_x = goals[min_goal_distance][:x]\r\n        goal_y = goals[min_goal_distance][:y]\r\n        \r\n        neighbors.each do |neighbor|\r\n          #goal_x = width-2\r\n          #goal_y = 1\r\n          distance_R =  ((goal_x - neighbor[:x])**2 + (goal_y - neighbor[:y])**2)**(1/2.0)\r\n          neighbor_neighbors = count_state(old_array, neighbor[:y], neighbor[:x], 0, width, height)\r\n          sum_Z = 0\r\n          neighbor_neighbors[:array].each do |n_y|\r\n               n_y.each do |elm|\r\n                 case elm\r\n                 when -1\r\n                   sum_Z = sum_Z+100\r\n                 when 0\r\n                   sum_Z = sum_Z+100\r\n                 when 1\r\n                   sum_Z = sum_Z+100\r\n                 when 2\r\n                   sum_Z = sum_Z+10\r\n                 when 3\r\n                   sum_Z = sum_Z-100\r\n                 end\r\n               end\r\n          end\r\n\r\n          neighbor[:value] = self_variables[:beta]*sum_Z +self_variables[:alpha]*distance_R\r\n        end\r\n        sorted_neighbors = neighbors.sort_by {|v| v[:value] }\r\n\r\n        next_x = x; next_y = y\r\n        sorted_neighbors.each do |elm|\r\n          if elm[:state] == 0\r\n              next\r\n          else\r\n               next_x = elm[:x]\r\n               next_y = elm[:y]\r\n               break\r\n          end \r\n        end\r\n\r\n        human_next = {old: {x: x, y: y}, next: {x: next_x, y: next_y}}\r\n        human_next_steps.push(human_next)\r\n        new_array[y][x] = 2\r\n      when 2\r\n        new_array[y][x] = 2\r\n      when 3\r\n        new_array[y][x] = 3\r\n    end\r\n\r\n  end\r\nend\r\n\r\nhuman_next_steps.each do |human|\r\n  human_next_y = human[:next][:y]\r\n  human_next_x = human[:next][:x]\r\n  goals.each do |goal|\r\n    if goal[:y] == human_next_y && goal[:x] == human_next_x\r\n      new_array[human_next_y][human_next_x] = 3\r\n      break\r\n    else\r\n      new_array[human_next_y][human_next_x] = 1\r\n    end\r\n  end\r\n  \r\nend", user_id: 1, init_rule: "# 0: 壁\r\n# 1: 人\r\n# 2: 通路\r\n# 3: 出口\r\n\r\ninit_array =[ [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],\r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 0, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 0, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 0, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], \r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n]\r\n\r\nheight.times do |y|\r\n   width.times do |x|\r\n      random = Random.rand(0..100)\r\n      if init_array[y][x] == 2 && (0 <= random && random < 10)\r\n         init_array[y][x] = 1\r\n      end\r\n   end\r\nend", width: 50, height: 50, pattern: true},
  {name: "ルール184", board_size: nil, step: 50, state_num: 2, init_type: nil, neighbor_rule: "rule184 = [0,0,0,1,1,1,0,1]\r\nold_array.each_with_index do |old_array_row, y|\r\n  old_array_row.each_with_index do |now, x|\r\n    if y < n+1\r\n      new_array[y][x] = old_array[y][x]\r\n    elsif y == n+1\r\n      before = y - 1\r\n\r\n      left = (x + width - 1) % width\r\n      center = x\r\n      right = (x + 1) % width\r\n\r\n      code = old_array[before][left] *4 + old_array[before][center]*2 + old_array[before][right]*1\r\n      new_array[y][x] = rule184[code]\r\n    else\r\n      new_array[y][x] = 0\r\n    end\r\n  end\r\nend", user_id: 1, init_rule: "init_array[0] = Array.new(height){Random.rand(0 .. 1)}", width: 50, height: 50, pattern: true},
  {name: "ルール184- copy", board_size: nil, step: 50, state_num: 2, init_type: nil, neighbor_rule: "old_array.each_with_index do |old_array_row, y|\r\n  nexts = []\r\n  old_array_row.each_with_index do |now, x|\r\n    if y < n+1\r\n      new_array[y][x] = old_array[y][x]\r\n    \r\n    elsif y == n+1\r\n      before = y - 1\r\n      center = x\r\n      right1 = (x + 1) % width\r\n      right2 = (x + 2) % width\r\n      right3 = (x + 3) % width\r\n      right4 = (x + 4) % width\r\n      right5 = (x + 5) % width\r\n      random = Random.rand(0 .. 100)\r\n      randamaize = (random < 20) ? true : false \r\n\r\n      if old_array[before][center] == 1\r\n        if old_array[before][right1] == 0\r\n          if old_array[before][right2] == 0\r\n            if old_array[before][right3] == 0\r\n              if old_array[before][right4] == 0\r\n                if old_array[before][right5] == 0\r\n                  if randamaize\r\n                    nexts.push(right5)\r\n                  else\r\n                    nexts.push(right4)\r\n                  end\r\n                else\r\n                  if randamaize\r\n                    nexts.push(right4)\r\n                  else\r\n                    nexts.push(right3)\r\n                  end\r\n                end\r\n              else\r\n                if randamaize\r\n                  nexts.push(right3)\r\n                else\r\n                  nexts.push(right2)\r\n                end\r\n              end\r\n            else\r\n              if randamaize\r\n                nexts.push(right2)\r\n              else\r\n                nexts.push(right1)\r\n              end\r\n            end\r\n          else\r\n            nexts.push(right1)\r\n          end\r\n        else\r\n          nexts.push(center)\r\n        end\r\n      else\r\n        new_array[y][x] = 0\r\n      end\r\n      new_array[y][x] = 0\r\n    \r\n    else\r\n      new_array[y][x] = 0\r\n    end\r\n  end\r\n  nexts.each do |nnn|\r\n    new_array[y][nnn] = 1\r\n  end\r\nend", user_id: 1, init_rule: "init_array[0] = Array.new(height){Random.rand(0 .. 1)}", width: 50, height: 50, pattern: true},
  {name: "BZ-reaction", board_size: nil, step: 200, state_num: 256, init_type: nil, neighbor_rule: "# 0: 健康\r\n# 1 - 3 感染\r\n# 4: 病気\r\nneighbors = count_state(now_array, y, x, 0, width, height)\r\nhealthy = 0; infection=0; sick=0; s=0;\r\nneighbors[:array].flatten.each do |neighbor|\r\n  case neighbor\r\n  when 0\r\n    healthy = healthy+1\r\n    s = s+0\r\n  when 1 .. 254\r\n    infection = infection +1\r\n    s = s+neighbor\r\n  when 255\r\n    sick = sick+1\r\n    s = s+255\r\n  end\r\nend\r\n\r\ncase now_state\r\nwhen 0\r\n  result = (infection/self_variables[:k1]).to_i + (sick/self_variables[:k2]).to_i\r\nwhen 1 .. 254\r\n  temp = (s/(infection+1)).to_i + self_variables[:g]\r\n  if temp > 255\r\n    result = 255\r\n  else\r\n    result = temp.to_i\r\n  end\r\nwhen 255\r\n  result = 0\r\nend\r\n\r\nresult", user_id: 1, init_rule: "init_array = Array.new(width){ Array.new(height){Random.rand(0 .. 255)} }", width: 50, height: 50, pattern: false}
])
Variable.create!([
  {name: "aaaa", value: 2.0, cell_automaton_id: 17},
  {name: "alpha", value: 100.0, cell_automaton_id: 19},
  {name: "beta", value: 1.0, cell_automaton_id: 19},
  {name: "k1", value: 0.9, cell_automaton_id: 23},
  {name: "k2", value: 2.0, cell_automaton_id: 23},
  {name: "g", value: 50.0, cell_automaton_id: 23}
])
